from config import *
from bottle import *
from entities import *
from pony.orm.integration.bottle_plugin import PonyPlugin
install(PonyPlugin())

'''
	Student REG: 1702267
	
    =============
    Server module
    =============
    This module provides all the basic functionalities of the application.
    The module is a standard Bottle application and runs on port 8080.
	
'''

#######################################################
### Begin route declaration
#######################################################

from bottle import route, run

'''
Root index for website.
'''
@route('/')
def index():
    return template('index')

'''
css files
'''
@route('/css/<filename>')
def server_static(filename):
	return static_file(filename, root='./css')
	
	
#------------------------------------------------------------------
#-------------------------      BOOKS    --------------------------
#------------------------------------------------------------------

'''
Books index page. Returns all books listed in the database. 
Provides a link to a specific book page where you can edit the book..
'''
@route('/books')
def books():
	# We select all the books in the db and pass it as a var to the template.
	books = select(b for b in Book)
	return template('books/index', books = books)
	
'''
Page showing specific book information.
'''
@route('/books/<id>/')
def show_book(id):
	# Retrieve the desired book. Use an id to fetch it from the database. ID is generated by previous page.
	books = Book[id]
	return template('books/show', books = books)
	
'''
Form to edit book
'''
@route('/books/<id>/edit/')
def edit_book(id):
    # retrieve the book by id from the database
	books = Book[id]
	# Create a selection of all possible authors. Used for dropdown list.
	authors = Author.select()
	publishers = Publisher.select()
	genres = Genre.select()
    # render the form using the edit template for books
	return template('books/edit', books = books, authors = authors, publishers = publishers, genres = genres)
	
'''
The method takes in input the edit form and
update the database accordingly.
'''
@route('/books/<id>/edit/', method='POST')
def update_book(id):
	# retrieve the books by id from the database
	books = Book[id]
	# updating the book title
	books.title = request.forms.get('title')
	books.year = request.forms.get('year')
	# update author etc, given the ID from the dropdown list 
	books.author = request.forms.get('author')
	books.publisher = request.forms.get('publisher')
	books.genre = request.forms.get('genre')

    # redirect the user to the books info page
	# %s is string formatting.
	redirect("/books/%s/" % id)
	
'''
Form for adding a book to the database
'''
@route('/books/add/')
def add_book():
	#We select authors, pubs and genres so that we can create a dropdown list with them.
	authors = Author.select()
	publishers = Publisher.select()
	genres = Genre.select()
	return template('books/add_book', authors = authors, publishers = publishers, genres = genres)

'''
Creates the new book
'''
@route('/books/add/', method='POST')
def create_book():
	# Gets all information from the form, and then redirects the user to the list of books.
	title = request.forms.get('title')
	year = request.forms.get('year')
	author = request.forms.get('author')
	publisher = request.forms.get('publisher')
	genre = request.forms.get('genre')
	book = Book(title = title, year = year, author = author, publisher = publisher, genre = genre )
	redirect("/books")
	
'''
Deleting a book. warn users of loans that will be erased.
'''
@route('/books/<id>/delete/')
def delete_book_warning(id):
	books = Book[id]
	# Warn users that the following loans will be terminated, if they delete the book.
	#shows info about the selected book so that they can see what is about to be deleted.
	return template('books/delete', books = books)
	
'''
Handles deleting the book and linked relations.
'''	
@route('/books/<id>/delete/', method='POST')
def delete_book(id):

	# This deletes the books, and the entry in the book_loan (link table),
	books = Book[id]
	books.delete()
	redirect("/books")
	
'''
Search function
'''
@route('/books/search/')
def search_book():
	return template('books/search')
	
'''
Search results.
'''
@route('/books/search/', method='POST')
def search_book():
	query = request.forms.get('query')
	cat = request.forms.get('search')
	
	#Cat is category.. depending on their search type we perform different queries on our db
	
	if cat == 'title':
		results = select(c for c in Book if c.title == query)
	
	elif cat == 'author':
		#we have to use a select as authors can write several books.
		names = query.split()
		results = select(c for c in Book if c.author.firstname == names[0] and c.author.lastname == names[1])
		
	elif cat == 'publisher':
		results = select(c for c in Book if c.publisher.name == query)
	
	# Case sensitive
	return template('books/show_res', books = results)

	
#------------------------------------------------------------------
#-------------------------     AUTHORS    -------------------------
#------------------------------------------------------------------

'''
Author index page. Returns all authors listed in the database. 
Provides a link to a specific auth page where you can edit the auth..
'''
@route('/authors')
def authors():
	# Our selection variable "authors" is passed to the template.
	authors = select(a for a in Author)
	return template('authors/index', authors = authors)

'''
Page showing specific author information.
'''
@route('/authors/<id>/')
def show_auth(id):
	# Retrieve the book. Use an id to fetch it from the database. ID is generated by previous page.
	authors = Author[id]
	return template('authors/show', authors = authors)

'''
Form to edit author
'''
@route('/authors/<id>/edit/')
def edit_author(id):
	#allows user to edit firstname and lastname
	authors = Author[id]
	return template('authors/edit', authors = authors)
	
'''
The method takes in input the edit form and
update the database accordingly.
'''
@route('/authors/<id>/edit/', method='POST')
def update_author(id):
	authors = Author[id]
	#Get the first and lastname from the form and update the db
	authors.firstname = request.forms.get('firstname')
	authors.lastname = request.forms.get('lastname')
	redirect("/authors/%s/" % id)
	
'''
Form for adding an author to the database
'''
@route('/authors/add/')
def add_author():
	return template('authors/add_author')
	
'''
Creates the new author
'''
@route('/authors/add/', method='POST')
def create_author():
	# Gets all information from the form, and then redirects the user to the list of authors.
	firstname = request.forms.get('firstname')
	lastname = request.forms.get('lastname')
	author = Author(firstname = firstname, lastname = lastname )
	redirect("/authors")
	
'''
Deleting an author. can also delete loans / books by association.
'''
@route('/authors/<id>/delete/')
def delete_author_warning(id):
	authors = Author[id]
	# This returns all books by the author
	results = select(c for c in Book if c.author == authors)
	# We have a results query that finds all books by the author.
	# Inside our tpl file, we then compare the results to ID's of books to find loans with this author.
	# This is needed, as deleting an author will delete their books.
	return template('authors/delete', authors = authors, results = results)
	
'''
Handles deleting the auth and linked relations.
'''	
@route('/authors/<id>/delete/', method='POST')
def delete_author(id):

	# This deletes the author and all related tables entries
	authors = Author[id]
	authors.delete()
	redirect("/authors")
	
'''
Search function
'''
@route('/authors/search/')
def search_author():
	return template('authors/search')
	
'''
Search results.
'''
@route('/authors/search/', method='POST')
def search_author():
	# Get the search category and then query.
	query = request.forms.get('query')
	cat = request.forms.get('search')
	
	if cat == 'firstname':
		results = select(c for c in Author if c.firstname == query)
	elif cat == 'lastname':
		results = select(c for c in Author if c.lastname == query)

	return template('authors/show_res', authors = results)
		
#------------------------------------------------------------------
#-------------------------     Publishers    ----------------------
#------------------------------------------------------------------
'''
Publisher index page. Returns all pubs listed in the database. 
Provides a link to a specific pub page where you can edit the book..
'''
@route('/publishers')
def publisher():
	# Our selection variable "publishers" is passed to the template.
	publishers = select(a for a in Publisher)
	return template('publishers/index', publishers = publishers)
	
'''
Page showing specific publisher information.
'''
@route('/publishers/<id>/')
def show_publisher(id):
	# Retrieve the publisher. Use an id to fetch it from the database. ID is generated by previous page.
	publishers = Publisher[id]
	return template('publishers/show', publishers = publishers)
	
'''
Form to edit publisher
'''
@route('/publishers/<id>/edit/')
def edit_publisher(id):
	#allows user to edit country, name
	publishers = Publisher[id]
	return template('publishers/edit', publishers = publishers)
	
'''
The method takes in input the edit form and
update the database accordingly.
'''
@route('/publishers/<id>/edit/', method='POST')
def update_publisher(id):
	publishers = Publisher[id]
	#Get the name and country
	publishers.name = request.forms.get('name')
	publishers.country = request.forms.get('country')
	redirect("/publishers/%s/" % id)
	
'''
Form for adding a new publisher
'''
@route('/publishers/add/')
def add_publisher():
	return template('publishers/add_publisher')
	
'''
Creates the new publisher
'''
@route('/publishers/add/', method='POST')
def create_publisher():
	# Gets all information from the form, and then redirects the user to the list of authors.
	name = request.forms.get('name')
	country = request.forms.get('country')
	publishers = Publisher(name = name, country = country )
	redirect("/publishers")
	
'''
Deleting a publisher. can also delete loans / books by association.
'''
@route('/publishers/<id>/delete/')
def delete_publisher_warning(id):
	publishers = Publisher[id]
	# This returns all books by the publisher
	results = select(c for c in Book if c.publisher == publishers)
	# We compare the Loan ID's to books found under the authors name. This warns users that deleting
	# the publisher will delete loans / books too!
	return template('publishers/delete', publishers = publishers, results = results)
	
'''
Handles deleting the publisher and linked relations.
'''	
@route('/publishers/<id>/delete/', method='POST')
def delete_publisher(id):
	# This deletes the pub and all related tables entries
	publishers = Publisher[id]
	publishers.delete()
	redirect("/publishers")
	
'''
Search function
'''
@route('/publishers/search/')
def search_publisher():
	return template('publishers/search')
	
'''
Search results.
'''
@route('/publishers/search/', method='POST')
def search_publisher():
	# Get the search category and then query.
	query = request.forms.get('query')
	cat = request.forms.get('search')
	
	if cat == 'name':
		results = select(c for c in Publisher if c.name == query)
	elif cat == 'country':
		results = select(c for c in Publisher if c.country == query)
		
	return template('publishers/show_res', publishers = results)
	
#------------------------------------------------------------------
#-------------------------     Genre    ---------------------------
#------------------------------------------------------------------
'''
Genre index page. Returns all genres listed in the database. 
Provides a link to a specific genre page where you can edit the genre..
'''
@route('/genres')
def genres():
	# Our selection variable "genre" is passed to the template.
	genres = select(a for a in Genre)
	return template('genres/index', genres = genres)
	
'''
Page showing specific genre information.
'''
@route('/genres/<id>/')
def show_genres(id):
	# Retrieve the genre. Use an id to fetch it from the database. ID is generated by previous page.
	genres = Genre[id]
	return template('genres/show', genres = genres)
	
'''
Form to edit genre
'''
@route('/genres/<id>/edit/')
def edit_genre(id):
	#allows user to edit the genre name.
	genres = Genre[id]
	return template('genres/edit', genres = genres)
	
'''
The method takes in input the edit form and
update the database accordingly.
'''
@route('/genres/<id>/edit/', method='POST')
def update_genre(id):
	genres = Genre[id]
	#Get the name of the genre and update the db
	genres.name = request.forms.get('name')
	redirect("/genres/%s/" % id)
	
'''
Form for adding a new genre
'''
@route('/genres/add/')
def add_genre():
	return template('genres/add_genre')
	
'''
Creates the new genre
'''
@route('/genres/add/', method='POST')
def create_genre():
	# Gets all information from the form, and then redirects the user to the list of genres.
	name = request.forms.get('name')
	genres = Genre(name = name)
	redirect("/genres")
	
'''
Deleting a genre. can also delete loans / books by association.
'''
@route('/genres/<id>/delete/')
def delete_genre_warning(id):
	genres = Genre[id]
	# This returns all books in the genre
	results = select(c for c in Book if c.genre == genres)
	# We compare the Loan ID's to books 
	# needed as deleting a genre can delete loans / books.
	return template('genres/delete', genres = genres, results = results)
	
'''
Handles deleting the genre and linked relations.
'''	
@route('/genres/<id>/delete/', method='POST')
def delete_genre(id):
	# This deletes the genre and all related tables entries
	genres = Genre[id]
	genres.delete()
	redirect("/genres")
	
'''
Search function
'''
@route('/genres/search/')
def search_genre():
	return template('genres/search')
	
'''
Search results.
'''
@route('/genres/search/', method='POST')
def search_genre():
	# Get the search category and then query.
	query = request.forms.get('query')
	cat = request.forms.get('search')
	
	if cat == 'name':
		results = select(c for c in Genre if c.name == query)

	return template('genres/show_res', genres = results)
	
#------------------------------------------------------------------
#-------------------------     Member    --------------------------
#------------------------------------------------------------------

'''
member index page. Returns all members listed in the database. 
Provides a link to a specific genre page where you can edit the genre..
'''
@route('/members')
def members():
	# Our selection variable "members" is passed to the template.
	members = select(m for m in Member)
	return template('members/index', members = members)
	
'''
Page showing specific genre information.
'''
@route('/members/<id>/')
def show_members(id):
	# Retrieve the member. Use an id to fetch it from the database. ID is generated by previous page.
	members = Member[id]
	return template('members/show', members = members)
	
'''
Form to edit member
'''
@route('/members/<id>/edit/')
def edit_member(id):
	#allows user to details, such as names, numbers, address
	members = Member[id]
	return template('members/edit', members = members)
	
'''
The method takes in input the edit form and
update the database accordingly.
'''
@route('/members/<id>/edit/', method='POST')
def update_member(id):
	members = Member[id]
	#Get the details of the edit form and update our db
	members.firstname = request.forms.get('firstname')
	members.lastname = request.forms.get('lastname')
	members.phone_num = request.forms.get('phone_num')
	members.address = request.forms.get('address')
	members.city = request.forms.get('city')
	members.country = request.forms.get('country')
	redirect("/members/%s/" % id)
	
'''
Form for adding a new member
'''
@route('/members/add/')
def add_members():
	return template('members/add_member')
	
'''
Creates the new member
'''
@route('/members/add/', method='POST')
def create_members():
	# Gets all information from the form, and then redirects the user to the list of members.
	firstname = request.forms.get('firstname')
	lastname = request.forms.get('lastname')
	phone_num = request.forms.get('phone_num')
	address = request.forms.get('address')
	city = request.forms.get('city')
	country = request.forms.get('country')
	members = Member(firstname = firstname, lastname = lastname, phone_num = phone_num, address = address, city = city, country = country)
	redirect("/members")
	
'''
Deleting a member. can also delete loans / books by association.
'''
@route('/members/<id>/delete/')
def delete_member_warning(id):
	members = Member[id]
	# This returns all books loaned to the member
	results = select(c for c in Loan if c.member == members)
	# We compare the Loan ID's to members, as deleting a member will delete their loans.
	return template('members/delete', members = members, results = results)
	
'''
Handles deleting the member and linked relations.
'''	
@route('/members/<id>/delete/', method='POST')
def delete_members(id):
	# This deletes the member and all related tables entries
	members = Member[id]
	members.delete()
	redirect("/members")
	
'''
Search function
'''
@route('/members/search/')
def search_members():
	return template('members/search')
	
'''
Search results.
'''
@route('/members/search/', method='POST')
def search_members():
	# Get the search category and then query.
	query = request.forms.get('query')
	cat = request.forms.get('search')
	
	if cat == 'name':
		names = query.split()
		results = select(c for c in Member if c.firstname == names[0] and c.lastname == names[1])

	return template('members/show_res', members = results)
	
	
#------------------------------------------------------------------
#-------------------------     Loans    --------------------------
#------------------------------------------------------------------

'''
loan index page. Returns all members listed in the database. 
Provides a link to a specific loan page where you can edit the loan..
'''
@route('/loans')
def loans():
	# Our selection variable "loans" is passed to the template.
	loans = select(l for l in Loan)
	return template('loans/index', loans = loans)
	
'''
Page showing specific genre information.
'''
@route('/loans/<id>/')
def show_loans(id):
	# Retrieve the loan. Use an id to fetch it from the database. ID is generated by previous page.
	loans = Loan[id]
	return template('loans/show', loans = loans)
	
'''
Form to edit loan
'''
@route('/loans/<id>/edit/')
def edit_loans(id):
	#allows user to members, due dates, books.
	loans = Loan[id]
	
	members = Member.select()
	books = Book.select()
	
	return template('loans/edit', loans = loans, members = members, books = books)
	
'''
The method takes in input the edit form and
update the database accordingly.
'''
@route('/loans/<id>/edit/', method='POST')
def update_loan(id):
	loans = Loan[id]
	#Get the details from the edit form
	loans.member = request.forms.get('member')
	loans.loan_out_date = request.forms.get('loan_out_date')
	loans.loan_due_date = request.forms.get('loan_due_date')
	
	#removal all books beforehand. needed as we dont want to add the same book twice...
	for b in loans.books:
		loans.books.remove(b)
	
	# Get the books selected. convert it to an integer, and add it to the loan.
	books_to_add = request.forms.getlist('books')
	books_to_add = list(map(int,books_to_add))
	for b in books_to_add:
		bk = Book[b]
		loans.books.add(bk)

	redirect("/loans/%s/" % id)
	
'''
Form for adding a new loan
'''
@route('/loans/add/')
def add_loans():
	members = Member.select()
	books = Book.select()
	return template('loans/add_loan', members = members, books = books)
	
'''
Creates the new loan
'''
@route('/loans/add/', method='POST')
def create_loans():
	# Gets all information from the form, and then redirects the user to the list of loans.
	member = request.forms.get('member')
	loan_out_date = request.forms.get('loan_out_date')
	loan_due_date = request.forms.get('loan_due_date')
	loans = Loan(member = member, loan_out_date = loan_out_date, loan_due_date = loan_due_date, returns = "False")
	
	# Add the books after the loan is created. Easiest way to add multiple books.
	books = request.forms.getlist('books')
	books = list(map(int,books))	
	
	for b in books:
		bk = Book[b]
		loans.books.add(bk)
	redirect("/loans")
	
'''
Deleting a loan. 
'''
@route('/loans/<id>/delete/')
def delete_loan_warning(id):
	loans = Loan[id]
	# We compare the Loan ID's to books found under the authors name.
	return template('loans/delete', loans = loans)
	
'''
Handles deleting the loan and linked relations.
'''	
@route('/loans/<id>/delete/', method='POST')
def delete_loans(id):
	# This deletes the loans
	loans = Loan[id]
	loans.delete()
	redirect("/loans")
	
'''
Search function
'''
@route('/loans/search/')
def search_loans():
	return template('loans/search')
	
'''
Search results.
'''
@route('/loans/search/', method='POST')
def search_loans():
	# Get the search category and then query.
	query = request.forms.get('query')
	cat = request.forms.get('search')
	
	#member id search
	if cat == 'mid':
		results = select(c for c in Loan if c.member.id == query)
		
	#book id search
	if cat == 'bid':
		query = int(query)
		
		# Not sure how to make this query work in PONYORM query.
		# Loops through a standard select query, and then appends all results that match the crtiera.
		# Cant figure out how to query a set within a query.
		
		# Create blank array
		results = []
		
		#Perform a select of loans. all of them.
		a = Loan.select()
		for loans in a:
			# Loop through the books in all the loans.
			for bk in loans.books:
				# if a book is equal to our query (book id) we add it to the array.
				if (bk.id == query):
					results.append(loans)

	return template('loans/show_res', loans = results)
	
'''
Return book from a loan. only sets to true... you cant UN-return a book. you create a new loan!
'''
@route('/loans/<id>/return/')
def return_loan(id):
	loans = Loan[id]
	loans.returns = "True"
	return template('loans/show', loans = loans)
	
#######################################################
### END route declaration
#######################################################

run(host='localhost', port=8080, debug=True, reloader=True)
